#!/bin/bash

pkill fuzzel && exit 0

# if mpv is playing in audio mode, kill
echo 'quit' | socat - /tmp/mpvsocket

# Prompt the user for a search query using Wofi
query=$(fuzzel -d --prompt="Search YouTube:")

# Check if the query is not empty
if [ -z "$query" ]; then
  exit 1
fi

# Use yt-dlp to search for the query and get the top 10 results in a JSON format
results=$(
  yt-dlp "ytsearch15:$query" \
    --print-json \
    --default-search "https://music.youtube.com/search?q=" \
    --no-playlist \
    --no-check-certificate \
    --geo-bypass \
    --flat-playlist \
    --skip-download \
    --quiet \
    --ignore-errors
)

# Initialize empty arrays for titles and urls
titles=()
urls=()

# Process each JSON object individually
while IFS= read -r line; do
  if [ -z "$line" ]; then
    continue
  fi
  title=$(echo "$line" | jq -r '.title')
  url=$(echo "$line" | jq -r '.url')
  titles+=("$title")
  urls+=("$url")
done <<<"$results"

# Combine titles and URLs into a menu format for Wofi
menu=""
for i in "${!titles[@]}"; do
  menu+="$i. ${titles[i]}\n"
done

# Prompt the user to select a video using Wofi
selection=$(echo -e "$menu" | fuzzel --dmenu --prompt="Select a video:")

# Check if a selection was made
if [ -z "$selection" ]; then
  notify-send "YouTube Search" "No video selected"
  exit 1
fi

# Extract the URL from the selection
url_id=$(echo "$selection" | cut -d. -f1)
url=${urls[$url_id]}
notify-send "Now playing" "${titles[$url_id]}"

# Play the selected video using mpv
mpv --input-ipc-server=/tmp/mpvsocket \
  --really-quiet --no-audio-display --no-video --no-terminal "$url"
