" Causes problems with some mappings
"source ~/.vim/vimrc
set ideastrictmode

""" runtime/defaults.vim
set history=200
set showcmd
" set wildmenu


" Leader map
let mapleader=' '
noremap <Leader>rc :e ~/.ideavimrc<CR>
noremap <Leader>s :source ~/.ideavimrc<CR>
noremap <Leader>q :q<CR>
noremap <Leader>y "+y<CR>
" noremap <Leader>p "+p<CR>
noremap <C-s> :w<CR>


map <Leader>Q :action Exit<CR>


" settings
set scrolloff=5
set incsearch
set showcmd
set visualbell


" map
nnoremap ; :
" nnoremap : ;


""" vim-sensible settings that work in IdeaVim
set nrformats-=octal
set incsearch
nnoremap <silent> <Esc> :nohlsearch<CR>
set scrolloff=5    " vim-sensible overrides to 1 if not set, but set in defaults.vim
set sidescrolloff=5
set history=1000   " overrides the 200 in defaults.vim

set hlsearch
set ignorecase
set smartcase
set visualbell

set showmode
set number relativenumber

" nnoremap <leader><space> :nohlsearch<CR>


" Toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
nmap <leader>i ~hi
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vmap <leader>u d~h

" Changes the word under the cursor, such that `.` will repeat with the next occurrence of the word
nnoremap <leader>j *``cgn

" 'Fighting Kirby' regex. Capture the current word so it can be used in back references
" E.g. :%s/\".*\"/[\1](https://google.co.uk?q=\1)
cnoremap <F2> \(.*\)


" Vim treats <Enter> just like <Down>. <S-Down> will scroll the window [count] pages forward, and so should <S-Enter>
" See VIM-2752
" nmap <S-Enter> <C-F>

" Not sure if shift+backspace is correct in NORMAL
" nnoremap <S-Backspace> B

" Eh? What's this?
" CTRL-Insert	copy Visual text (to clipboard)			*<C-Insert>*

""" IdeaVim options
" Smart join for <C-J>
set ideajoin
" Map vim marks to IDEA global marks
set ideamarks


""" IdeaVim actions
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)
nnoremap L :bnext<CR>
nnoremap H :bprevious<CR>
nmap <Leader>x :bdelete<CR>

" Keys from vim-gitgutter
nmap ]c <Action>(VcsShowNextChangeMarker)
nmap [c <Action>(VcsShowPrevChangeMarker)
" Not from vim-gitgutter. ={motion} is for indenting. =c does nothing
nmap =c <Action>(VcsShowCurrentChangeMarker)

nmap ]d <Action>(GotoNextError)
nmap [d <Action>(GotoPreviousError)

" These don't work in Rider, annoyingly. Try HighlightUsagesInFile (see <leader>h below)
nmap ]q <Action>(GotoNextElementUnderCaretUsage)
nmap [q <Action>(GotoPrevElementUnderCaretUsage)

nmap gb <Action>(Back)
nmap gD <Action>(GotoTypeDeclaration)
nmap gf <Action>(Forward)
nmap gh <Action>(ShowHoverInfo)
" nmap gl <Action>(QuickJavaDoc)
nmap gr <Action>(QuickImplementations)
" nmap gy <Action>(ShowErrorDescription)

nmap <leader>b <Action>(ToggleLineBreakpoint)
if &ide =~? 'rider'
  nmap <leader>c <Action>(RiderShowIncomingCalls)
else
  nmap <leader>c <Action>(CallHierarchy)
endif

" Highlight usages, use CMD+G/Shift+CMD+G to iterate
nmap <leader>h <Action>(HighlightUsagesInFile)
nmap <leader>n <Action>(ReSharperNavigateTo)
nmap <leader>p <Action>(ParameterInfo)
nmap <leader>q <Action>(ToggleRenderedDocPresentation)
nmap <leader>r <Action>(Refactorings.QuickListPopupAction)
xmap <leader>r <Action>(Refactorings.QuickListPopupAction)
nmap <leader>s <Action>(ShowUsages)
nmap <leader>t <Action>(TypeHierarchy)
nmap <leader>u <Action>(FindUsages)
nmap <leader>v <Action>(Vcs.QuickListPopupAction)
nmap <Leader>w <action>(ActiveToolwindowGroup)
nmap <leader>z <Action>(HideAllWindows)

nmap <A-j> <Action>(MoveLineDown)
nmap <A-k> <Action>(MoveLineUp)
xmap <A-j> <Action>(MoveLineDown)
xmap <A-k> <Action>(MoveLineUp)

command Wrap action EditorToggleUseSoftWraps


""" IdeaVim plugins

packadd matchit		" Extended matching. Supports % (matching motion) and g% (reverse motion)


function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction

nnoremap gX :set opfunc=Redact<CR>g@
nnoremap gx :set opfunc=function('Redact')<CR>g@
nnoremap gy :set opfunc={arg -> execute "normal `[v`]rx"}<CR>g@
function! Redact(type)
    execute "normal `[v`]rx"
endfunction

nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

" Action map
nnoremap zr :action Run<CR>
nnoremap zs :action Stop<CR>
nnoremap zd :action Debug<CR>

" IDEA action
nnoremap <Leader>ra :action RenameElement<CR>
nnoremap <Leader>gD :action GotoImplementation<CR>
nnoremap <Leader>im :action ImplementMethods<CR>
nnoremap <Leader>rv :action IntroduceVariable<CR>
nnoremap <Leader>cr :action CopyReference<CR>
nnoremap <Leader>em :action ExtractMethod<CR>
nnoremap <Leader>sw :action SurroundWith<CR>

nnoremap <A-c> "+
xnoremap <A-c> "+
vnoremap <A-c> "+

inoremap <C-y> :action InsertInlineProposal<CR>
